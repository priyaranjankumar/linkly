server {
    listen 80;
    server_name localhost; # Or your domain in production

    # Increase max body size if needed for other potential API calls
    client_max_body_size 1M;

    # Serve React static files (HTML, CSS, JS)
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html; # Handle SPA routing
    }

    # Proxy API requests starting with /api/ to the backend service
    location /api/ {
        # Use the backend service name defined in docker-compose.yml
        proxy_pass http://backend:8000/api/;

        # Set headers for the backend application
        proxy_set_header Host $host; # Forward original host header
        proxy_set_header X-Real-IP $remote_addr; # Forward client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Forward proxy chain IPs
        proxy_set_header X-Forwarded-Proto $scheme; # Forward original scheme (http/https)

        # Optional: Increase timeouts if backend requests can be long
        # proxy_connect_timeout       60s;
        # proxy_send_timeout          60s;
        # proxy_read_timeout          60s;
    }

     # Proxy redirection requests (root paths matching potential short codes) to the backend
     # Adjust regex as needed based on your short code format (e.g., length, characters)
     location ~ ^/(\w+)$ {
        proxy_pass http://backend:8000/$1; # Pass the captured short code

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
     }

    # Optional: Add error pages
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    # }

    # Optional: Disable logging for static assets to reduce noise
    # location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg)$ {
    #     access_log off;
    #     expires 1d; # Cache static assets in browser
    # }
}