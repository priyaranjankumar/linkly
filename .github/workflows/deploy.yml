name: Build and Deploy to AKS

# Required repository secrets:
# AZURE_CREDENTIALS: JSON output from 'az ad sp create-for-rbac' command
# ACR_NAME: Azure Container Registry name (without .azurecr.io suffix)
# AKS_CLUSTER_NAME: Azure Kubernetes Service cluster name
# RESOURCE_GROUP_NAME: Azure Resource Group name
# KEY_VAULT_NAME: Azure Key Vault name

on:
  push:
    branches: [main] # Trigger on push to main branch
  workflow_dispatch: # Allow manual trigger

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_TAG: ${{ github.sha }} # Use commit SHA as image tag

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }} ./backend # Adjust path if needed
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}
          # Also tag as latest
          docker tag ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/backend:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend # Adjust path if needed
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
          # Also tag as latest
          docker tag ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push # Run after build job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Install kubelogin
        run: |
          echo "Installing kubelogin..."
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.30/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          sudo chmod +x /usr/local/bin/kubelogin
          rm -rf bin kubelogin-linux-amd64.zip
          echo "kubelogin installed"
      
      - name: Grant Key Vault Access
        run: |
          echo "Granting service principal access to Key Vault..."
          
          # Extract client ID from AZURE_CREDENTIALS
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          echo "Using Client ID: $CLIENT_ID"
          
          # Get the service principal object ID from client ID
          SP_OBJECT_ID=$(az ad sp show --id "$CLIENT_ID" --query id -o tsv)
          echo "Found Object ID: $SP_OBJECT_ID"
          
          # Set access policy to allow secret getting
          az keyvault set-policy --name ${{ secrets.KEY_VAULT_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --object-id "$SP_OBJECT_ID" \
            --secret-permissions get list
          
          echo "Key Vault access granted"
          
      # Instead of trying to grant permissions, we'll create a ClusterRoleBinding directly
      - name: Set AKS context and create admin credentials
        run: |
          echo "Getting AKS credentials with admin privileges..."
          # Get admin credentials instead of trying to assign roles
          az aks get-credentials \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --admin \
            --file $HOME/.kube/config
            
          echo "Testing Kubernetes connection..."
          kubectl get nodes
          
          echo "AKS credentials acquired successfully"

      - name: Get Secrets from Key Vault
        id: getsecrets
        run: |
          echo "Setting secrets as environment variables..."
          # Fetch secrets using Azure CLI
          DB_HOST=$(az keyvault secret show --name db-host --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)
          DB_NAME=$(az keyvault secret show --name db-name --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)
          DB_USER=$(az keyvault secret show --name db-user --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)
          DB_PASSWORD=$(az keyvault secret show --name db-password --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)
          REDIS_HOST=$(az keyvault secret show --name redis-host --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)
          REDIS_PORT=$(az keyvault secret show --name redis-port --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)
          REDIS_PASSWORD=$(az keyvault secret show --name redis-password --vault-name ${{ secrets.KEY_VAULT_NAME }} --query value -o tsv)

          # Make secrets available to subsequent steps (mask sensitive ones)
          echo "::add-mask::$DB_PASSWORD"
          echo "::add-mask::$REDIS_PASSWORD"
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_ENV
          echo "REDIS_PORT=$REDIS_PORT" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> $GITHUB_ENV
          echo "Secrets fetched."

      - name: Create/Update Kubernetes Secret
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=DB_HOST=${{ env.DB_HOST }} \
            --from-literal=DB_NAME=${{ env.DB_NAME }} \
            --from-literal=DB_USER=${{ env.DB_USER }} \
            --from-literal=DB_PASSWORD=${{ env.DB_PASSWORD }} \
            --from-literal=REDIS_HOST=${{ env.REDIS_HOST }} \
            --from-literal=REDIS_PORT=${{ env.REDIS_PORT }} \
            --from-literal=REDIS_PASSWORD=${{ env.REDIS_PASSWORD }} \
            --from-literal=FRONTEND_URL=${{ env.FRONTEND_URL }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Manifests
        run: |
          # Replace image placeholders in manifests
          sed -i "s|<ACR_LOGIN_SERVER>|${{ env.ACR_LOGIN_SERVER }}|g" ./kubernetes/*.yaml
          sed -i "s|:latest|:${{ env.IMAGE_TAG }}|g" ./kubernetes/*.yaml # Use specific tag

          # Apply manifests (except secrets.yaml as it's handled above)
          kubectl apply -f ./kubernetes/backend-deployment.yaml
          kubectl apply -f ./kubernetes/frontend-deployment.yaml
          # Add other manifests here if needed

          echo "Deployment initiated. Checking deployment status..."
          
          # Wait a moment for pods to start being created
          sleep 20
          
          # Debug - check status of pods
          echo "=== Current pod status ==="
          kubectl get pods
          
          # Debug - check deployment details
          echo "=== Deployment details ==="
          kubectl describe deployment/backend-deployment
          
          # Debug - check events
          echo "=== Cluster events ==="
          kubectl get events --sort-by='.lastTimestamp'
          
          # Get pod status for more details
          POD_NAME=$(kubectl get pods -l app=backend -o jsonpath="{.items[0].metadata.name}")
          if [ -n "$POD_NAME" ]; then
            echo "=== Backend pod details ==="
            kubectl describe pod $POD_NAME
            
            # Check pod logs if possible
            echo "=== Backend pod logs (if any) ==="
            kubectl logs $POD_NAME --previous || true
            kubectl logs $POD_NAME || true
          else
            echo "No backend pods found yet"
          fi
          
          # Now monitor rollout with increased verbosity
          echo "Monitoring deployment rollout (will timeout after 120s)..."
          kubectl rollout status deployment/backend-deployment --timeout=120s || {
            echo "Backend deployment timed out, but continuing with frontend check"
          }
          kubectl rollout status deployment/frontend-deployment --timeout=120s || {
            echo "Frontend deployment timed out"
            exit 1
          }

      - name: Get Frontend Service IP
        id: get-frontend-ip
        run: |
          # Deploy frontend first to ensure the service exists and gets an IP
          sed -i "s|<ACR_LOGIN_SERVER>|${{ env.ACR_LOGIN_SERVER }}|g" ./kubernetes/frontend-deployment.yaml
          sed -i "s|:latest|:${{ env.IMAGE_TAG }}|g" ./kubernetes/frontend-deployment.yaml
          kubectl apply -f ./kubernetes/frontend-deployment.yaml
          
          # Wait for the service to get an external IP
          echo "Waiting for frontend service to receive public IP..."
          ATTEMPTS=0
          MAX_ATTEMPTS=10
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            FRONTEND_IP=$(kubectl get service frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$FRONTEND_IP" ]; then
              break
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            echo "Waiting for IP assignment... (attempt $ATTEMPTS/$MAX_ATTEMPTS)"
            sleep 15
          done
          
          if [ -z "$FRONTEND_IP" ]; then
            echo "Could not get frontend IP after multiple attempts. Using placeholder."
            FRONTEND_IP="frontend-not-ready"
          fi
          
          echo "Frontend public IP: $FRONTEND_IP"
          echo "FRONTEND_URL=$FRONTEND_IP" >> $GITHUB_ENV
